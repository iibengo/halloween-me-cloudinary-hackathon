---
// Importaciones necesarias
import Layout from "../layouts/Layout.astro";
import { CldUploadWidget } from "astro-cloudinary";
import HowTo from "../components/how-to/how-to.vue";
import "../styles/global.css";

// Inicializa las imágenes vacías (opcional, ya que lo manejaremos en el script)
let images = []; // Cambia a let para poder modificar el array
---

<Layout title="Generador Halloween - Cloudinary Hackathon">
  <main
    class="min-h-screen bg-orange-900 flex flex-col items-center justify-center p-4"
  >
    <div class="max-w-md w-full bg-black rounded-lg shadow-2xl overflow-hidden">
      <div class="p-6 space-y-6">
        <h1 class="text-3xl font-extrabold text-orange-500 text-left">
          Generador de imágenes Halloween
        </h1>

        <CldUploadWidget
          id="upload-widget"
          uploadPreset="upload-unsigned-images"
          options={{
            sources: ["local"],
            multiple: false,
            maxFiles: 1,
            language: "es",
            text: {
              es: {
                or: "O",
                menu: {
                  files: "Subir desde tu dispositivo",
                },
                local: {
                  browse: "Seleccionar",
                  dd_title_single: "Arrastra tu imagen aquí",
                },
              },
            },
          }}
        >
          <button
            class="mt-6 w-full py-3 px-6 bg-orange-500 hover:bg-orange-600 text-white font-bold rounded-full transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-orange-400 focus:ring-opacity-50"
          >
            HALLOWEEN ME
          </button>
          <p class="mt-4 text-1-xl text-orange-500 text-left">
            Últimos <span class="font-bold">HalloweenMe</span> generados:
          </p>
        </CldUploadWidget>

        <ul id="images-list" class="grid grid-cols-2 gap-4 mt-6">
          <!-- Las imágenes se agregarán aquí dinámicamente -->
        </ul>

        <HowTo client:only />
      </div>
    </div>
  </main>

  <script lang="ts">
    
    const widget = document.getElementById("upload-widget");
    const imagesList = document.getElementById("images-list"); // Selecciona el contenedor de las imágenes

    // Función para obtener imágenes de la API
    const fetchImages = async () => {
      try {
        const response = await fetch("/api/getPublicHalloweenMeListService"); // Llama a tu API aquí
        const data = await response.json(); // Convierte la respuesta a JSON
     
        // Actualiza el DOM o el estado según sea necesario
        if (data.success) {
          images = data.data; // Asigna los datos recibidos a la variable images
       
          // Limpiar la lista existente
          imagesList.innerHTML = "";

          // Agregar cada imagen al DOM
          images.forEach((image) => {
            const listItem = document.createElement("li");
            listItem.setAttribute("key", image.cloudinaryId);
            listItem.innerHTML = `
              <a href="/photo?id=${image.id}&cid=${image.cloudinaryId}">
                <img
                  src="${image.cloudinaryUrl}"
                  width="250"
                  height="250"
                  style="border-radius: 0.5rem; border: 4px solid #FFA500;"
                  alt="Generated Halloween Image"
                />
              </a>
            `;
            imagesList.appendChild(listItem); // Agrega el item a la lista
          });
        } else {
          console.error("Error fetching images:", data.error); // Maneja el error
        }
      } catch (error) {
        console.error("Error fetching images:", error); // Manejo de errores
      }
    };

    // Llama a la función al cargar el cliente
    fetchImages();

    if (widget) {
      widget.addEventListener("clduploadwidget:success", async (e) => {
        const publicId = e.detail.info.public_id;
        const response = await fetch("/api/saveImageService", {
    method: 'POST',  // Cambia el método a POST
    headers: {
        'Content-Type': 'application/json'  // Define el tipo de contenido como JSON
    },
    body: JSON.stringify({  // Convierte los datos a JSON y los envía en el cuerpo de la solicitud
        cloudinaryId: publicId,
        original: true,
        cloudinaryUrl: ""
    })
}); 

// Procesa la respuesta en formato JSON
const data = await response.json();
        window.location.href = `/photo?cid=${publicId}&id=${data.id}`;
      });
    }
  </script>

  <style scoped>
    main {
      text-align: center;
    }

    ul {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 4px;
      list-style: none;
    }
  </style>
</Layout>
